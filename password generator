import random
import string

def generate_password(length=12, use_uppercase=True, use_digits=True, use_special=True):

    
    
    # Define the character sets
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase if use_uppercase else ''
    digits = string.digits if use_digits else ''
    special_characters = string.punctuation if use_special else ''
    
    # Combine all possible characters into one pool
    all_characters = lowercase + uppercase + digits + special_characters
    
    # Ensure there is at least one character from each selected category
    password_chars = []
    if use_uppercase:
        password_chars.append(random.choice(uppercase))
    if use_digits:
        password_chars.append(random.choice(digits))
    if use_special:
        password_chars.append(random.choice(special_characters))
    
    # Fill the remaining length with random choices from the full character pool
    password_chars += random.choices(all_characters, k=length - len(password_chars))
    
    # Shuffle the characters to ensure randomness
    random.shuffle(password_chars)
    
    # Join the list into a string to form the final password
    password = ''.join(password_chars)
    return password

def validate_input(prompt, valid_options):
    """
    Helper function to validate user input.
    
    Parameters:
    - prompt (str): The input prompt to show the user.
    - valid_options (list): A list of valid options for the user to choose from.
    
    Returns:
    - str: The valid user input.
    """
    while True:
        user_input = input(prompt).lower()
        if user_input in valid_options:
            return user_input
        else:
            print(f"Invalid input. Please choose from {valid_options}.")

def main():
    """
    Main function to interact with the user and generate a password.
    """
    print("Welcome to the Password Generator!")

    # Get password length from user, ensuring it's at least 8
    while True:
        try:
            length = int(input("Enter the desired password length (minimum 8): "))
            if length >= 8:
                break
            else:
                print("Password length should be at least 8 characters.")
        except ValueError:
            print("Please enter a valid number.")
    
    # Ask the user whether to include uppercase letters
    use_uppercase = validate_input("Include uppercase letters? (y/n): ", ['y', 'n']) == 'y'

    # Ask the user whether to include digits
    use_digits = validate_input("Include digits? (y/n): ", ['y', 'n']) == 'y'

    # Ask the user whether to include special characters
    use_special = validate_input("Include special characters? (y/n): ", ['y', 'n']) == 'y'
    
    # Generate the password based on user preferences
    password = generate_password(length, use_uppercase, use_digits, use_special)
    
    # Display the generated password
    print(f"\nGenerated Password: {password}")
    
    # Ask if the user wants to generate another password
    while True:
        generate_again = validate_input("Would you like to generate another password? (y/n): ", ['y', 'n'])
        if generate_again == 'y':
            main()  # Recurse to regenerate the password
        else:
            print("Thank you for using the Password Generator!")
            break

if __name__ == "__main__":
    main()
